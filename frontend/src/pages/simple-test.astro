---
import Layout from '../layouts/Layout.astro';
---

<Layout title="简化测试">
	<div class="container mx-auto p-4">
		<h1 class="text-3xl font-bold mb-6 text-center">🔧 简化测试页面</h1>
		
		<div class="mb-6 bg-yellow-100 p-4 rounded-lg">
			<h2 class="text-xl font-bold mb-2">测试说明</h2>
			<p>这个页面用于测试修复后的跨框架功能，检查是否还有无限循环问题。</p>
		</div>
		
		<!-- 状态显示 -->
		<div id="state-display" class="mb-6 p-4 bg-gray-100 rounded-lg">
			<h3 class="font-bold mb-2">当前状态</h3>
			<div id="counter-display" class="text-2xl font-bold mb-2">计数器: 0</div>
			<div id="messages-count" class="text-lg">消息数量: 0</div>
		</div>
		
		<!-- 简单控制 -->
		<div class="flex gap-4 mb-6">
			<button id="increment-btn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
				+1
			</button>
			<button id="decrement-btn" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">
				-1
			</button>
			<button id="add-message-btn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
				添加消息
			</button>
		</div>
		
		<!-- 日志计数器 -->
		<div class="bg-black text-green-400 p-4 rounded-lg font-mono text-sm">
			<h3 class="text-white font-bold mb-2">订阅统计</h3>
			<div id="subscription-count">订阅次数: 0</div>
			<div id="update-count">更新次数: 0</div>
		</div>
	</div>
</Layout>

<script>
	// 类型定义
	interface UniversalState {
		sharedCounter: number;
		sharedMessages: Array<{
			id: number;
			text: string;
			framework: string;
			timestamp: string;
		}>;
		currentUser: {
			name: string;
			framework: string;
		};
		theme: string;
		lastUpdated: string;
	}

	let subscriptionCount = 0;
	let updateCount = 0;
	
	// 更新统计显示
	function updateStats(): void {
		const subscriptionElement = document.getElementById('subscription-count');
		const updateElement = document.getElementById('update-count');
		
		if (subscriptionElement) {
			subscriptionElement.textContent = `订阅次数: ${subscriptionCount}`;
		}
		if (updateElement) {
			updateElement.textContent = `更新次数: ${updateCount}`;
		}
	}
	
	// 更新状态显示
	function updateDisplay(state: UniversalState): void {
		updateCount++;
		
		const counterElement = document.getElementById('counter-display');
		const messagesElement = document.getElementById('messages-count');
		
		if (counterElement) {
			counterElement.textContent = `计数器: ${state.sharedCounter}`;
		}
		if (messagesElement) {
			messagesElement.textContent = `消息数量: ${state.sharedMessages.length}`;
		}
		
		updateStats();
	}
	
	// 初始化测试
	async function initSimpleTest(): Promise<void> {
		try {
			console.log('开始简化测试...');
			
			// 动态导入状态管理器
			const { default: universalStore } = await import('../stores/universalStore.js');
			
			// 初始显示
			updateDisplay(universalStore.getState());
			
			// 订阅状态变化
			subscriptionCount++;
			updateStats();
			
			const unsubscribe = universalStore.subscribe((newState: UniversalState) => {
				console.log('状态更新回调触发');
				updateDisplay(newState);
			});
			
			// 绑定按钮事件
			const incrementBtn = document.getElementById('increment-btn');
			if (incrementBtn) {
				incrementBtn.addEventListener('click', () => {
					console.log('点击增加按钮');
					universalStore.incrementCounter();
				});
			}
			
			const decrementBtn = document.getElementById('decrement-btn');
			if (decrementBtn) {
				decrementBtn.addEventListener('click', () => {
					console.log('点击减少按钮');
					universalStore.decrementCounter();
				});
			}
			
			const addMessageBtn = document.getElementById('add-message-btn');
			if (addMessageBtn) {
				addMessageBtn.addEventListener('click', () => {
					console.log('点击添加消息按钮');
					universalStore.addMessage('测试消息', 'Simple');
				});
			}
			
			console.log('✅ 简化测试初始化完成');
			
			// 页面卸载时清理
			window.addEventListener('beforeunload', () => {
				unsubscribe();
				console.log('页面卸载，清理订阅');
			});
			
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : String(error);
			console.error('❌ 简化测试初始化失败:', errorMessage);
		}
	}
	
	// 页面加载完成后初始化
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initSimpleTest);
	} else {
		initSimpleTest();
	}
</script>

<style>
	:global(html.dark) {
		background-color: #1a202c;
		color: #e2e8f0;
	}
</style> 