---
import Layout from '../layouts/Layout.astro';
import ServerIslandDemo from '../components/ServerIslandDemo.astro';
import InteractiveServerIsland from '../components/InteractiveServerIsland.tsx';
import SystemMonitor from '../components/SystemMonitor.tsx';
import { actions } from 'astro:actions';

// 获取 URL 参数
const url = new URL(Astro.request.url);
const userId = url.searchParams.get('userId') || undefined;

// 为交互式组件准备服务器端数据
const interactiveData = {
  serverTime: new Date().toLocaleString('zh-CN'),
  randomNumber: Math.floor(Math.random() * 1000)
};

// 获取真实的系统资源使用情况
async function fetchDashboardData() {
  try {
    const systemStatsResult = await Astro.callAction(actions.getSystemStats, {});
    
    if (systemStatsResult?.data?.success) {
      const stats = systemStatsResult.data.stats;
      
      // 获取数据库统计信息
      const dbStatsResult = await Astro.callAction(actions.statsGetDashboard, {});
      const dbStats = dbStatsResult?.data?.success ? dbStatsResult.data.stats : null;
      
      return {
        // 系统资源信息
        cpuUsage: stats.cpu.usage,
        cpuCores: stats.cpu.cores,
        cpuModel: stats.cpu.model,
        memoryUsed: stats.memory.used,
        memoryTotal: stats.memory.total,
        memoryUsagePercent: stats.memory.usagePercent,
        
        // 磁盘信息
        diskUsed: stats.disk.used,
        diskTotal: stats.disk.total,
        diskUsagePercent: stats.disk.usagePercent,
        
        // 网络信息
        networkReceived: stats.network.bytesReceived,
        networkSent: stats.network.bytesSent,
        
        // 系统信息
        platform: stats.system.platform,
        arch: stats.system.arch,
        hostname: stats.system.hostname,
        uptime: stats.system.uptime,
        nodeVersion: stats.system.nodeVersion,
        
        // 数据库统计
        totalUsers: dbStats?.totalUsers || 0,
        totalTasks: dbStats?.totalTasks || 0,
        enabledTasks: dbStats?.enabledTasks || 0,
        
        lastUpdate: new Date(stats.timestamp).toLocaleString('zh-CN')
      };
    } else {
      // 如果获取失败，返回默认数据
      return {
        cpuUsage: 0,
        cpuCores: 0,
        cpuModel: 'Unknown',
        memoryUsed: 0,
        memoryTotal: 0,
        memoryUsagePercent: 0,
        diskUsed: 0,
        diskTotal: 0,
        diskUsagePercent: 0,
        networkReceived: 0,
        networkSent: 0,
        platform: 'Unknown',
        arch: 'Unknown',
        hostname: 'Unknown',
        uptime: 0,
        nodeVersion: 'Unknown',
        totalUsers: 0,
        totalTasks: 0,
        enabledTasks: 0,
        lastUpdate: new Date().toLocaleString('zh-CN')
      };
    }
  } catch (error) {
    console.error('获取系统统计信息失败:', error);
    // 返回默认数据
    return {
      cpuUsage: 0,
      cpuCores: 0,
      cpuModel: 'Error',
      memoryUsed: 0,
      memoryTotal: 0,
      memoryUsagePercent: 0,
      diskUsed: 0,
      diskTotal: 0,
      diskUsagePercent: 0,
      networkReceived: 0,
      networkSent: 0,
      platform: 'Error',
      arch: 'Error',
      hostname: 'Error',
      uptime: 0,
      nodeVersion: 'Error',
      totalUsers: 0,
      totalTasks: 0,
      enabledTasks: 0,
      lastUpdate: new Date().toLocaleString('zh-CN')
    };
  }
}

const dashboardData = await fetchDashboardData();
---

<Layout title="服务器群岛示例">
  <main class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- 页面标题 -->
      <div class="text-center mb-8">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          🏝️ 服务器群岛示例
        </h1>
        <p class="text-lg text-gray-600 max-w-3xl mx-auto">
          使用 @astrojs/node 适配器的服务器群岛功能演示。
          服务器群岛允许在静态页面中嵌入服务器端渲染的动态内容。
        </p>
      </div>

      <!-- 功能说明 -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">🚀 功能特性</h2>
        <div class="grid md:grid-cols-3 gap-6">
          <div class="text-center">
            <div class="bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2"></path>
              </svg>
            </div>
            <h3 class="font-semibold text-gray-800">服务器端渲染</h3>
            <p class="text-sm text-gray-600 mt-1">在服务器上生成动态内容</p>
          </div>
          <div class="text-center">
            <div class="bg-green-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
            <h3 class="font-semibold text-gray-800">客户端交互</h3>
            <p class="text-sm text-gray-600 mt-1">支持客户端水合和交互</p>
          </div>
          <div class="text-center">
            <div class="bg-purple-100 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-3">
              <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v4a2 2 0 01-2 2H9a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <h3 class="font-semibold text-gray-800">混合架构</h3>
            <p class="text-sm text-gray-600 mt-1">静态与动态内容的完美结合</p>
          </div>
        </div>
      </div>

      <!-- 服务器群岛示例 -->
      <div class="space-y-8">
        <!-- 基础服务器群岛 -->
        <ServerIslandDemo 
          title="基础服务器群岛" 
          userId={userId}
          server:defer
        >
          <div slot="fallback" class="bg-blue-50 p-6 rounded-lg border border-blue-200 animate-pulse">
            <div class="flex items-center space-x-2 mb-4">
              <div class="w-6 h-6 bg-blue-300 rounded animate-pulse"></div>
              <div class="h-6 bg-blue-300 rounded w-32 animate-pulse"></div>
            </div>
            <div class="grid md:grid-cols-2 gap-6">
              <div class="bg-white p-4 rounded-lg">
                <div class="h-4 bg-gray-300 rounded mb-2 animate-pulse"></div>
                <div class="space-y-2">
                  <div class="h-3 bg-gray-200 rounded animate-pulse"></div>
                  <div class="h-3 bg-gray-200 rounded animate-pulse"></div>
                  <div class="h-3 bg-gray-200 rounded animate-pulse"></div>
                </div>
              </div>
              <div class="bg-white p-4 rounded-lg">
                <div class="h-4 bg-gray-300 rounded mb-2 animate-pulse"></div>
                <div class="space-y-2">
                  <div class="h-3 bg-gray-200 rounded animate-pulse"></div>
                  <div class="h-3 bg-gray-200 rounded animate-pulse"></div>
                </div>
              </div>
            </div>
          </div>
        </ServerIslandDemo>

        <!-- 交互式服务器群岛 -->
        <InteractiveServerIsland 
          initialData={interactiveData}
          client:load
        />

        <!-- 实时系统监控仪表板 -->
        <SystemMonitor 
          initialData={dashboardData}
          client:load
        />
      </div>

      <!-- 使用说明 -->
      <div class="mt-8 bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-2xl font-bold text-gray-800 mb-4">📖 使用说明</h2>
        <div class="space-y-4">
          <div class="border-l-4 border-blue-500 pl-4">
            <h3 class="font-semibold text-gray-800">1. 配置 Node.js 适配器</h3>
            <p class="text-gray-600 text-sm">在 astro.config.mjs 中添加 @astrojs/node 适配器，Astro 5.0 中服务器群岛已是正式功能。</p>
          </div>
          <div class="border-l-4 border-green-500 pl-4">
            <h3 class="font-semibold text-gray-800">2. 创建服务器群岛组件</h3>
            <p class="text-gray-600 text-sm">使用 .astro 文件创建服务器端渲染的组件，可以包含异步数据获取。</p>
          </div>
          <div class="border-l-4 border-purple-500 pl-4">
            <h3 class="font-semibold text-gray-800">3. 使用 server:defer 指令</h3>
            <p class="text-gray-600 text-sm">在组件上添加 server:defer 指令来创建服务器群岛，并可以添加 fallback 内容。</p>
          </div>
          <div class="border-l-4 border-orange-500 pl-4">
            <h3 class="font-semibold text-gray-800">4. 测试功能</h3>
            <p class="text-gray-600 text-sm">
              尝试添加 URL 参数 <code class="bg-gray-100 px-1 rounded">?userId=123</code> 
              来查看动态用户数据渲染。
            </p>
          </div>
        </div>
      </div>

      <!-- 导航链接 -->
      <div class="mt-8 text-center">
        <div class="space-x-4">
          <a 
            href="/" 
            class="inline-flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            返回首页
          </a>
          <a 
            href="/server-islands?userId=123" 
            class="inline-flex items-center px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            测试用户数据
          </a>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  main {
    animation: fadeIn 0.6s ease-in-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 