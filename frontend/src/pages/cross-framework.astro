---
import Layout from '../layouts/Layout.astro';
import UniversalStateReact from '../components/UniversalStateReact';
import UniversalStateVue from '../components/UniversalStateVue.vue';
---

<Layout title="跨框架状态共享">
	<div class="container mx-auto p-4">
		<h1 class="text-4xl font-bold mb-6 text-center dark:text-white">
			🌐 跨框架状态共享演示
		</h1>
		
		<div class="mb-8 bg-gradient-to-r from-blue-100 to-purple-100 dark:from-blue-900 dark:to-purple-900 p-6 rounded-lg">
			<h2 class="text-2xl font-bold mb-4 dark:text-white">演示说明</h2>
			<p class="text-gray-700 dark:text-gray-300 mb-4">
				这个页面展示了如何在不同的前端框架之间共享全局状态。三个组件使用同一个状态管理器：
			</p>
			<ul class="list-disc list-inside space-y-2 text-gray-700 dark:text-gray-300">
				<li><span class="font-semibold text-blue-600">🔵 React组件</span> - 使用React Hook和useState</li>
				<li><span class="font-semibold text-green-600">🟢 Vue组件</span> - 使用Vue 3 Composition API</li>
				<li><span class="font-semibold text-yellow-600">🟡 Vanilla JS组件</span> - 使用原生JavaScript</li>
			</ul>
			<p class="text-gray-700 dark:text-gray-300 mt-4">
				<strong>试试看：</strong> 在任何一个组件中修改计数器、发送消息或切换主题，其他组件会立即同步更新！
			</p>
		</div>
		
		<div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
			<!-- React 组件 -->
			<div>
				<UniversalStateReact client:load />
			</div>
			
			<!-- Vue 组件 -->
			<div>
				<UniversalStateVue client:load />
			</div>
			
			<!-- Vanilla JS 组件 -->
			<div>
				<div id="vanilla-container">
					<div class="p-6 rounded-lg shadow-lg border-2 border-yellow-200 bg-yellow-50 text-gray-800">
						<div class="text-center">
							<div class="animate-pulse">
								<div class="h-6 bg-gray-200 rounded w-3/4 mx-auto mb-4"></div>
								<div class="h-32 bg-gray-200 rounded mb-4"></div>
								<div class="h-4 bg-gray-200 rounded w-1/2 mx-auto"></div>
							</div>
							<p class="mt-4 text-sm text-gray-600">正在加载 Vanilla JS 组件...</p>
						</div>
					</div>
				</div>
			</div>
		</div>
		
		<div class="mt-12 bg-gray-100 dark:bg-gray-800 p-6 rounded-lg">
			<h2 class="text-2xl font-bold mb-4 dark:text-white">技术实现</h2>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<div>
					<h3 class="text-lg font-semibold mb-2 dark:text-white">核心特性</h3>
					<ul class="list-disc list-inside space-y-1 text-gray-700 dark:text-gray-300">
						<li>框架无关的状态管理器</li>
						<li>发布-订阅模式</li>
						<li>localStorage持久化</li>
						<li>跨标签页同步</li>
						<li>TypeScript支持</li>
					</ul>
				</div>
				<div>
					<h3 class="text-lg font-semibold mb-2 dark:text-white">适用场景</h3>
					<ul class="list-disc list-inside space-y-1 text-gray-700 dark:text-gray-300">
						<li>微前端架构</li>
						<li>渐进式迁移</li>
						<li>多框架共存</li>
						<li>组件库开发</li>
						<li>跨页面状态共享</li>
					</ul>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style>
	:global(html.dark) {
		background-color: #1a202c;
		color: #e2e8f0;
	}
</style>

<script>
	// 动态导入Vanilla JS组件，避免SSR问题
	async function initVanillaComponent() {
		try {
			const { createUniversalStateVanilla } = await import('../components/UniversalStateVanilla.js');
			
			const container = document.getElementById('vanilla-container');
			if (container) {
				// 清除加载提示
				container.innerHTML = '';
				
				// 创建组件
				const vanillaComponent = createUniversalStateVanilla('vanilla-container');
				
				// 在页面卸载时清理
				window.addEventListener('beforeunload', () => {
					if (vanillaComponent) {
						vanillaComponent.destroy();
					}
				});
				
				console.log('✅ Vanilla JS 组件初始化成功');
			} else {
				console.error('❌ 找不到 vanilla-container 元素');
			}
		} catch (error) {
			console.error('❌ Vanilla JS 组件初始化失败:', error);
			
			// 显示错误信息
			const container = document.getElementById('vanilla-container');
			if (container) {
				const errorMessage = error instanceof Error ? error.message : String(error);
				container.innerHTML = `
					<div class="p-6 rounded-lg shadow-lg border-2 border-red-200 bg-red-50 text-red-800">
						<h3 class="font-bold mb-2">🟡 Vanilla JS 组件</h3>
						<p class="text-sm">组件加载失败: ${errorMessage}</p>
						<button onclick="location.reload()" class="mt-2 px-3 py-1 bg-red-500 text-white rounded text-sm">
							重新加载
						</button>
					</div>
				`;
			}
		}
	}
	
	// 确保在DOM加载完成后初始化
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initVanillaComponent);
	} else {
		// DOM已经加载完成
		initVanillaComponent();
	}
	
	// 初始化主题
	document.addEventListener('DOMContentLoaded', () => {
		const theme = localStorage.getItem('theme') || 'light';
		document.documentElement.classList.add(theme);
	});
</script> 